/* Generated By:JJTree: Do not edit this line. ASTcomplexRegularExpressionUnitIdentifier.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;

public
class ASTcomplexRegularExpressionUnitIdentifier extends SimpleNode {
  public ASTcomplexRegularExpressionUnitIdentifier(int id) {
    super(id);
  }

  public ASTcomplexRegularExpressionUnitIdentifier(SparcTranslator p, int id) {
    super(p, id);
  }
  public void split()
  {
	 //remove redundant units from clause of the type ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~REG:
	  while(((SimpleNode)((SimpleNode)this.parent).parent).id==SparcTranslatorTreeConstants.JJTCOMPLEXREGULAREXPRESSIONUNIT)
	  {
		  String newImage;
		  if((((SimpleNode)this.parent).image.equals
		   (SparcTranslatorConstants.tokenImage[SparcTranslatorConstants.COMPLEMENT].
		    substring(1,SparcTranslatorConstants.tokenImage[SparcTranslatorConstants.
		                                                COMPLEMENT].length()-1))
		   ^ (((SimpleNode)((SimpleNode)this.parent).parent).image.equals  
		   (SparcTranslatorConstants.tokenImage[SparcTranslatorConstants.COMPLEMENT].
				    substring(1,SparcTranslatorConstants.tokenImage[SparcTranslatorConstants.
				                                                COMPLEMENT].length()-1)
		   ))))
		  {
		    newImage="~";
		  }
		  else
		  {
			  newImage="";
		  }
		  
		  this.parent=((SimpleNode)this.parent).parent;
		  ((SimpleNode)this.parent).image=newImage;
	  }
	  
     SimpleNode AncestorConcatenator=(SimpleNode) ((SimpleNode)((SimpleNode)((SimpleNode)this.parent)).parent).parent;
     int childCount=AncestorConcatenator.jjtGetNumChildren();
     int place=-1;
     for(int i=0;i<childCount;i++)
     {
    	 if(AncestorConcatenator.jjtGetChild(i)==((SimpleNode)this.parent).parent)
    	 {
    		 place=i;
    	 }
     }
     SimpleNode keepRepeatition=null;
     if(((SimpleNode)((SimpleNode)this.parent).parent).jjtGetNumChildren()==2)
     {
       keepRepeatition=(SimpleNode) ((SimpleNode)((SimpleNode)this.parent).parent).jjtGetChild(1);
     }
     String imageForFirstUnit=((SimpleNode)this.parent).image;
     AncestorConcatenator.removeIthChild(place);
	 for(int i=0;i<image.length();i++)
	 {
		 char c=image.charAt(i);
		 ASTcomplexRegularExpressionRepeatableUnit runit=
				 new ASTcomplexRegularExpressionRepeatableUnit(SparcTranslatorTreeConstants.JJTCOMPLEXREGULAREXPRESSIONREPEATABLEUNIT);
		 ASTcomplexRegularExpressionUnit unit=
				 new ASTcomplexRegularExpressionUnit(SparcTranslatorTreeConstants.JJTCOMPLEXREGULAREXPRESSIONUNIT);
		 if(i==0)
		 {
			 unit.image=imageForFirstUnit;
		 }
		 ASTcharacterRegularExpression n=
				 new ASTcharacterRegularExpression(SparcTranslatorTreeConstants.JJTCHARACTERREGULAREXPRESSION);
		 n.image=Character.toString(c);
		 unit.jjtAddChild(n, 0);
		 runit.jjtAddChild(unit, 0);
		 AncestorConcatenator.jjtAddNodeInside(runit,place);
		 if(i==image.length()-1 && keepRepeatition!=null)
		 {
		    runit.jjtAddChild(keepRepeatition, 1);
		    keepRepeatition.parent=runit;
		 }
		 ++place;
	 }
  }


  /** Accept the visitor. **/
  public Object jjtAccept(SparcTranslatorVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=b549c5caa5d0e1c96c454cac1834268f (do not edit this line) */
