/* Generated By:JJTree&JavaCC: Do not edit this line. SparcTranslatorConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SparcTranslatorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MAXINTDIRECTIVE = 1;
  /** RegularExpression Id. */
  int CONSTDIRECTIVE = 2;
  /** RegularExpression Id. */
  int SORTDEFKEYWORD = 3;
  /** RegularExpression Id. */
  int PREDDEFKEYWORD = 4;
  /** RegularExpression Id. */
  int PROGRULDEFKEYWORD = 5;
  /** RegularExpression Id. */
  int NOT = 6;
  /** RegularExpression Id. */
  int MOD = 7;
  /** RegularExpression Id. */
  int OR = 8;
  /** RegularExpression Id. */
  int AND = 9;
  /** RegularExpression Id. */
  int IDENTIFIER = 10;
  /** RegularExpression Id. */
  int VARIABLE = 11;
  /** RegularExpression Id. */
  int NONZERODIGIT = 12;
  /** RegularExpression Id. */
  int POSITIVE_INTEGER = 13;
  /** RegularExpression Id. */
  int ZERO = 14;
  /** RegularExpression Id. */
  int PLUS = 15;
  /** RegularExpression Id. */
  int MULT = 16;
  /** RegularExpression Id. */
  int DIV = 17;
  /** RegularExpression Id. */
  int EQ = 18;
  /** RegularExpression Id. */
  int NOTEQ = 19;
  /** RegularExpression Id. */
  int GT = 20;
  /** RegularExpression Id. */
  int GTEQ = 21;
  /** RegularExpression Id. */
  int SM = 22;
  /** RegularExpression Id. */
  int SMEQ = 23;
  /** RegularExpression Id. */
  int OP = 24;
  /** RegularExpression Id. */
  int CP = 25;
  /** RegularExpression Id. */
  int OB = 26;
  /** RegularExpression Id. */
  int CB = 27;
  /** RegularExpression Id. */
  int ORRSEP = 28;
  /** RegularExpression Id. */
  int CRRSEP = 29;
  /** RegularExpression Id. */
  int WEAKSEP = 30;
  /** RegularExpression Id. */
  int COMMA = 31;
  /** RegularExpression Id. */
  int DOT = 32;
  /** RegularExpression Id. */
  int COLON = 33;
  /** RegularExpression Id. */
  int SEMICOLON = 34;
  /** RegularExpression Id. */
  int DOLLAR = 35;
  /** RegularExpression Id. */
  int COMPLEMENT = 36;
  /** RegularExpression Id. */
  int HEAD_OR = 37;
  /** RegularExpression Id. */
  int AGGREGATE_COUNT = 38;
  /** RegularExpression Id. */
  int AGGREGATE_SUM = 39;
  /** RegularExpression Id. */
  int AGGREGATE_MIN = 40;
  /** RegularExpression Id. */
  int AGGREGATE_MAX = 41;
  /** RegularExpression Id. */
  int OSB = 42;
  /** RegularExpression Id. */
  int OCB = 43;
  /** RegularExpression Id. */
  int POUND_SIGN = 44;
  /** RegularExpression Id. */
  int IDENTIFIER_WITH_OP = 45;
  /** RegularExpression Id. */
  int NEGATIVE_ATOM_WITH_OP = 46;
  /** RegularExpression Id. */
  int NEGATIVE_SORT_ATOM_WITH_OP = 47;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 48;
  /** RegularExpression Id. */
  int SPACE = 49;
  /** RegularExpression Id. */
  int MINUS = 50;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_PROGRAM_RULES = 1;
  /** Lexical state. */
  int IN_REGULAREXPRESSIONSEQUENCE = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"#maxint\"",
    "\"#const\"",
    "<SORTDEFKEYWORD>",
    "<PREDDEFKEYWORD>",
    "<PROGRULDEFKEYWORD>",
    "<NOT>",
    "\"mod\"",
    "\"or\"",
    "\"and\"",
    "<IDENTIFIER>",
    "<VARIABLE>",
    "<NONZERODIGIT>",
    "<POSITIVE_INTEGER>",
    "\"0\"",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"!=\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\":-\"",
    "\":+\"",
    "\":~\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\";\"",
    "\"$\"",
    "\"~\"",
    "\"|\"",
    "\"#count\"",
    "\"#sum\"",
    "\"#min\"",
    "\"#max\"",
    "\"[\"",
    "\"]\"",
    "\"#\"",
    "<IDENTIFIER_WITH_OP>",
    "<NEGATIVE_ATOM_WITH_OP>",
    "<NEGATIVE_SORT_ATOM_WITH_OP>",
    "<SINGLE_LINE_COMMENT>",
    "<SPACE>",
    "\"-\"",
  };

}
