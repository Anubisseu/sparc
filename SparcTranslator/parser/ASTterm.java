/* Generated By:JJTree: Do not edit this line. ASTterm.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;

public
class ASTterm extends SimpleNode {
  public ASTterm(int id) {
    super(id);
  }

  public ASTterm(SparcTranslator p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(SparcTranslatorVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
  
  /**
   * Check if this term has variables
   * @return true if it has and false otherwise
   */
  public boolean hasVariables() {
	  return hasVariables((SimpleNode)this);
  }
  
  /**
   * Check if SimpleNode has variables
   * @param n SimpleNode to check
   * @return true if it has and false otherwise
   */
  private boolean hasVariables(SimpleNode n) {
	  if(n.getId()==SparcTranslatorTreeConstants.JJTVAR) {
		  return true;
	  }
	  boolean result=false;
	  for(int i=0;i<n.jjtGetNumChildren();i++) {
		  if(hasVariables((SimpleNode)n.jjtGetChild(i))) {
			  result=true;
			  break;
		  }
	  }
	  return result;
  }
  
  
  /**
   * Check if the terms has arithmetic operations
   * @return true if it has an arithmetic operation ( +,-,*,/) and false otherwise 
   */
  public boolean hasArithmeticOperations() {
	  String termString=this.toString();
	  String operations="+-*/";
	  for (char c:operations.toCharArray())
	  {
		  if(termString.indexOf(c)!=-1)
			  return true;
	  }
	  return false;
  }
  
  
  /**
   * Check if the term is ground
   * @return true or false
   */
  public boolean isGround()
  {
	 return !hasArithmeticOperations() && !hasVariables(); 
  }
  
  
  
  public String toString() {
	  return toString(false);
  }
  
  public String toString(boolean useOriginalImages) {
	 if(this.jjtGetNumChildren()==0) {
		 return this.image;
	 }
	 else
	 return ((SimpleNode)(this.jjtGetChild(0))).toString(useOriginalImages);
  }
}
/* JavaCC - OriginalChecksum=c1ac1ba327197118b424963735d16a51 (do not edit this line) */
